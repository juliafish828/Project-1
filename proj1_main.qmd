---
title: "Project 1 Fish McDowell"
format: pdf
editor: visual
---

```{r}
#| include: false
library(tidyverse)
```


Data is everywhere. It's power is immeasurable with finding patterns, modeling relationships, and driving decisions. In order to be able to do that, data must be handled appropriately.  In this report, we will go through the motions of loading in and preprocessing some data so that it's true power can be used as discussed above.


## Question 1: Selecting Columns

First, we will load in the appropriate data set and select only `Area_name`, `STCOU`, and any columns that end with the letter D, as this is the only information we need. We will also lower case the `Area_name` variable.

```{r}
sec1 <- read_csv("./data/EDU01a.csv", col_names = TRUE)

sec1_new <- sec1 |>
  select(area_name = Area_name,
         STCOU,
         ends_with("D"))

head(sec1_new, n = 5)
```

The selected columns look to be what we hoped, with all that aren't `area_name` and `STCOU` end with "D".

## Question 2: Long Formatted Data

Next, we will convert this data into long format with only one row per enrollment value for that area name. We will put the column names into a separate new variable to keep that information.


```{r}
sec1_long <- sec1_new |>
  pivot_longer(cols = 3:12,
               names_to = "survey_type",
               values_to = "vals")

head(sec1_long, n = 5)
```

This looks to match the pivot that we hoped to make.

## Question 3: Further Splitting Data

As above, we notice that one of the new columns (labeled `r colnames(sec1_long)[3]`) corresponds to the old column names that end with "D". We know that the information in this column represents multiple pieces of information. Namely, the first 3 characters represent the survey, the next 4 represent the value type, and the last 2 digits represent the year of measurement. Knowing this information, we will now parse through those strings and create a new variable with the numeric date represented as YYYY. We will also do that with the first 3 and remaining 4 characters in the string.


```{r}
long_updated <- sec1_long |>
  mutate(
    year = as.numeric(paste0("19", substr(sec1_long$survey_type, 8, 9))),
    survey = substr(sec1_long$survey_type, 1, 3),
    val_type = substr(sec1_long$survey_type, 4, 7)
  )

head(long_updated, n = 5)
```

Looking at the head of this data set, we have split the `survey_type` variable into the 3 separate pieces of information that is represents.


## Question 4: Splitting Into County and Non-County Data


